#!/usr/bin/python3

# salmonBioInfo.py
# this module and classes therein are here /usr/lib/python3.4 on efglserv
import re, sys, glob, os, math, time, multiprocessing
from multiprocessing import Process
from subprocess import *
from itertools import islice

def barcode():	# read in BCsplit file(s) and store meta data in dictionary
	wellPosE = ['A01', 'B01', 'C01', 'D01', 'E01', 'F01', 'G01', 'H01', 'A02', 'B02', 'C02', 'D02', 'E02', 'F02', 'G02', 'H02', 'A03', 'B03', 'C03', 'D03', 'E03', 'F03', 'G03', 'H03', 'A04', 'B04', 'C04', 'D04', 'E04', 'F04', 'G04', 'H04', 'A05', 'B05', 'C05', 'D05', 'E05', 'F05', 'G05', 'H05', 'A06', 'B06', 'C06', 'D06', 'E06', 'F06', 'G06', 'H06', 'A07', 'B07', 'C07', 'D07', 'E07', 'F07', 'G07', 'H07', 'A08', 'B08', 'C08', 'D08', 'E08', 'F08', 'G08', 'H08', 'A09', 'B09', 'C09', 'D09', 'E09', 'F09', 'G09', 'H09', 'A10', 'B10', 'C10', 'D10', 'E10', 'F10', 'G10', 'H10', 'A11', 'B11', 'C11', 'D11', 'E11', 'F11', 'G11', 'H11', 'A12', 'B12', 'C12', 'D12', 'E12', 'F12', 'G12', 'H12']
	rightFile = ('BC', 'bc', 'barcode')	#tuple for barcode match file
	bcDict = {}
	for file in glob.glob("*"):
		if file.startswith((rightFile)):
			tempBCFileList = []
			with open(file) as f: bcFileList = f.read().splitlines()
			for i in bcFileList:
				rowDat = i.split(',')
				rowDat = list(filter(None, rowDat))
				if len(rowDat) ==8: tempBCFileList.append(i)
			bcFileList = list(filter(None, tempBCFileList))	# delete empty lines in barcode file
			
			# create one bcDict
			for i in bcFileList[1:]:
				mData = re.split('\t|,| ', i)	# delete empty items in data row
				mData = list(filter(None, mData))
				mData[6] = wellPosE[int(mData[6])-1]
				bcDict[str(mData[1]) + str(mData[0])] = mData[1:]
	return bcDict

	
def readGeno():	# read data from all geno files
	MetData, gCountDict, genotypeDict = {},{},{}
	countOnce, lociList = 0, []
	for file in sorted(glob.glob('*.genos')):
		gCall = []
		with open(file) as f: samData = f.read().splitlines()
		hRow = re.split(',|:', samData[0])
		gCData = [int(hRow[2]), int(hRow[4]), float(hRow[6]), float(hRow[8])]
		for i in samData[1:]:
			genoRow = re.split('=|,', i)
			gCData.extend((int(genoRow[2]), int(genoRow[4])))
			gCall.append(genoRow[6])
			if countOnce == 0: lociList.append(genoRow[0])
		fullName = hRow[0].split('.')
		gCountDict[fullName[0]] = gCData
		genotypeDict[fullName[0]] = gCall
		countOnce=1
	return gCountDict, genotypeDict, lociList

	
def iGeno(genotypeDict, lociList):	# calculate success rateS for each sample
	omyPBT96 = ["M09AAD.076", "M09AAJ.163", "M09AAE.082", "OMS00002", "OMS00006", "OMS00024", "OMS00039", "OMS00053", "OMS00057", "OMS00058", "OMS00062", "OMS00064", "OMS00068", "OMS00070", "OMS00071", "OMS00072", "OMS00074", "OMS00077", "OMS00078", "OMS00079", "OMS00111", "OMS00089", "OMS00090", "OMS00101", "OMS00105", "OMS00106", "OMS00154", "OMS00112", "OMS00118", "OMS00120", "OMS00121", "OMS00132", "OMS00175", "OMS00179", "OMS00180", "Omy_101832-195", "Omy_101993-189", "Omy_102505-102", "Omy_104519-624", "Omy_105105-448", "Omy_105385-406", "Omy_105714-265", "Omy_107806-34", "Omy_108007-193", "Omy_109243-222", "Omy_109894-185", "Omy_110064-419", "Omy_111383-51", "Omy_113490-159", "Omy_114315-438", "Omy_114587-480", "Omy_129870-756", "Omy_116733-349", "Omy_128923-433", "Omy_130524-160", "Omy_97660-230", "Omy_99300-202", "Omy_aldB-165", "Omy_anp-17", "Omy_arp-630", "Omy_b1-266", "Omy_BAC-B4-324", "Omy_ada10-71", "Omy_redd1-410", "Omy_cd59-206", "Omy_colla1-525", "Omy_cox1-221", "Omy_crb-106", "Omy_g12-82", "Omy_gluR-79", "Omy_hsc715-80", "Omy_hsf2-146", "Omy_IL17-185", "Omy_Il-1b_.028", "Omy_Il1b-198", "Omy_IL6-320", "Omy_metA-161", "Omy_NaKATPa3-50", "Omy_txnip-343", "Omy_nkef-241", "Omy_ntl-27", "Omy_Ogo4-212", "Omy_bcAKala-380rd", "Omy_Ots249-227", "Omy_oxct-85", "Omy_p53-262", "Omy_rapd-167", "Omy_rbm4b-203", "Omy_srp09-37", "Omy_stat3-273", "Omy_u09-53.469", "Omy_u09-54-311", "Omy_U11_2b-154", "Omy_vatf-406", "OMY1011SNP", "OmyY1_2SEXY"]
	otsPBT96 = ["Ots_100884-287", "Ots_105132-200", "Ots_110551-64", "Ots_117432-409", "Ots_94903-99R", "Ots_cox1-241", "Ots_GTH2B-550", "Ots_mapKpr-151", "Ots_OTALDBINT1-SNP1", "Ots_Prl2", "Ots_TGFB", "Ots_u07-25.325", "Ots_101554-407", "Ots_105385-421", "Ots_110689-218", "Ots_118205-61", "Ots_96500-180", "Ots_E2-275", "Ots_HMGB1-73", "Ots_MHC1", "Ots_OTDESMIN19-SNP1", "Ots_RAG3", "Ots_Thio", "Ots_u07-49.290", "Ots_101704-143", "Ots_105407-117", "Ots_112301-43", "Ots_118938-325", "Ots_96899-357R", "Ots_Est740", "Ots_hsc71-3'-488", "Ots_MHC2", "Ots_OTSTF1-SNP1", "Ots_redd1-187", "Ots_TLR3", "Ots_u1002-75", "Ots_102414-395", "Ots_108820-336", "Ots_112419-131", "Ots_123921-111", "Ots_ARNT", "Ots_ETIF1A", "Ots_HSP90B-100", "Ots_mybp-85", "Ots_P53", "Ots_S7-1", "Ots_tpx2-125", "Ots_u211-85", "Ots_102801-308", "Ots_109525-816", "Ots_112820-284", "Ots_124774-477", "Ots_AsnRS-60", "Ots_FGF6B_1", "Ots_IGF-I.1-76", "Ots_NFYB-147", "Ots_parp3-286", "Ots_SClkF2R2-135", "Ots_txnip-321", "Ots_u4-92", "Ots_103122-180", "Ots_110064-383", "Ots_112876-371", "Ots_128757-61R", "Ots_brp16-64", "Ots_GCSH", "Ots_Ikaros-250", "Ots_nkef-192", "Ots_pigh-105", "Ots_SEXY3-1", "Ots_u07-07.161", "Ots_u6-75", "Ots_104415-88", "Ots_110201-363", "Ots_113242-216", "Ots_129458-451", "Ots_CD59-2", "Ots_GDH-81x", "Ots_IL8R_C8", "Ots_NOD1", "Ots_pop5-96", "Ots_SWS1op-182", "Ots_u07-17.135", "Ots_unk526", "Ots_105105-613", "Ots_110495-380", "Ots_115987-325", "Ots_94857-232R", "Ots_CirpA", "Ots_GPH-318", "Ots_mapK-3'-309", "Ots_ntl-255", "Ots_ppie-245", "Ots_TAPBP", "Ots_u07-18.378", "Ots_vatf-251"]
	OneSub270 = ['One_1a.43386-37', 'One_1a.27200-35', 'One_1a.4900-40', 'One_2.29037-65', 'One_1a.25746-65', 'One_4a.5042-49', 'One_1a.42159-31', 'One_1a.40540-34', 'One_1a.32238-60', 'One_4a.51580-50', 'One_dds-529', 'One_4a.32895-28', 'One_1a.22268-41', 'One_1b.74818-26', 'One_1b.61920-50', 'One_4a.53531-43', 'One_1d.50813-42', 'One_2.51190-49', 'One_4a.84616-28', 'One_2.76532-58', 'One_3RFP.58408-56', 'One_3RFP.26492-46', 'One_2.74998-68', 'One_3RFP.25184-65', 'One_2.34943-66', 'One_4a.44564-40', 'One_2.27413-63', 'One_3RFP.70952-46', 'One_4a.32932-27', 'One_2.64150-27', 'One_U1215-82', 'One_spf30-207', 'One_1a.14403-38', 'One_3RFP.22563-57', 'One_2.21735-50', 'One_1b.56276-30', 'One_4a.22901-67', 'One_4a.46542-38', 'One_2.44103-35', 'One_3RFP.12866-45', 'One_1a.36888-37', 'One_1b.63191-29', 'One_3RFP.46608-58', 'One_3RFP.56125-30', 'One_4a.25035-26', 'One_1a.54542-52', 'One_1b.76686-31', 'One_ins-107', 'One_1a.51402-35', 'One_2.21362-59', 'One_2.90529-63', 'One_1a.20787-45', 'One_1c.87896-59', 'One_hsc71-220', 'One_3RFP.53932-47', 'One_3RFP.38229-53', 'One_2.90371-33', 'One_1a.27760-67', 'One_2.66468-68', 'One_1a.45935-29', 'One_2.80177-55', 'One_U1214-107', 'One_ssrd-135', 'One_1a.13961-31', 'One_2.5744-26', 'One_PIP_3', 'One_redd1-414rd', 'One_1b.9134-28', 'One_3RFP.80015-44', 'One_3RFP.7464-69', 'One_1b.64367-65', 'One_sys1-230', 'One_3RFP.6937-57', 'One_1b.72992-37', 'One_3RFP.47148-54', 'One_1b.88442-61', 'One_ZNF-61', 'One_2.58880-45', 'One_1a.39597-30', 'One_1b.83667-61', 'One_2.77164-35', 'One_1a.15933-53', 'One_2.41371-35', 'One_3RFP.22665-32', 'One_2.86898-35', 'One_U1105', 'One_4a.52596-64', 'One_GTHa', 'One_4a.32159-43', 'One_1b.56339-60', 'One_3RFP.72689-27', 'One_3RFP.22492-53', 'One_2.20130-27', 'One_U1209-111', 'One_1b.70694-28', 'One_1b.70246-46', 'One_1b.74472-27', 'One_2.81573-50', 'One_2.38869-26', 'One_1b.72136-33', 'One_4a.25174-68', 'One_1b.85587-38', 'One_2.65998-48', 'One_2.87240-34', 'One_1a.23491-46', 'One_2.84041-67', 'One_1b.9362-41', 'One_2.75847-69', 'One_1a.29135-58', 'One_4a.40410-31', 'One_3RFP.52579-51', 'One_3RFP.89355-44', 'One_vatf-214', 'One_4a.22514-58', 'One_RAG3-93', 'One_3RFP.72056-60', 'One_1b.5780-62', 'One_HGFA-49', 'One_U1009-91', 'One_1a.53123-31', 'One_3RFP.74551-60', 'One_1a.37709-28', 'One_3RFP.18602-33', 'One_4a.58187-48', 'One_U401-224', 'One_U503-170', 'One_1c.51810-33', 'One_1d.80954-64', 'One_1a.12851-49', 'One_3RFP.60219-36', 'One_U1012-68', 'One_1a.17043-35', 'One_3RFP.50303-37', 'One_4a.43537-65', 'One_1b.60684-45', 'One_2.35396-68', 'One_4a.41625-38', 'One_U1201-492', 'One_3RFP.36741-50', 'One_U1024-197', 'One_1a.23626-48', 'One_1b.6939-43', 'One_4a.47407-42', 'One_aldB-152', 'One_4a.13104-68', 'One_GPDH-201', 'One_U1004-183', 'One_U1101', 'One_U1206-108', 'One_U1207-231', 'One_Zp3b-49', 'One_1a.42211-64', 'One_1a.5407-55', 'One_1b.78365-62', 'One_4a.63494-55', 'One_GHII-2165', 'One_U1203-175', 'One_1b.64886-42', 'One_2.5338-43', 'One_3RFP.40708-40', 'One_U1014-74', 'One_3RFP.71744-45', 'One_3RFP.80215-59', 'One_4a.12382-55', 'One_CFP1', 'One_3RFP.76568-44', 'One_ghsR-66', 'One_1a.12158-56', 'One_1c.70294-64', 'One_2.63762-51', 'One_2.8522-64', 'One_3RFP.60536-30', 'One_3RFP.81817-50', 'One_4a.63914-64', 'One_gdh-212', 'One_1b.56528-40', 'One_3RFP.19596-43', 'One_U1003-75', 'One_1a.30563-32', 'One_1c.34041-34', 'One_Ots208-234', 'One_1b.56018-52', 'One_1b.60577-60', 'One_1b.68250-26', 'One_1b.80929-65', 'One_2.11303-51', 'One_2.66245-33', 'One_2.78198-36', 'One_2.80525-35', 'One_3RFP.25749-53', 'One_4a.67550-44', 'One_CD9-269', 'One_ODC1-196', 'One_cin-177', 'One_1a.11387-56', 'One_1a.53797-66', 'One_1c.5765-39', 'One_2.13757-55', 'One_2.45776-68', 'One_3RFP.39193-43', 'One_3RFP.62278-33', 'One_RFC2-285', 'One_1a.25904-44', 'One_1a.55218-55', 'One_3RFP.70898-49', 'One_1b.73656-45', 'One_2.45957-54', 'One_4a.6566-43', 'One_4a.51425-41', 'One_1a.32514-40', 'One_2.15628-38', 'One_2.41128-67', 'One_2.53715-43', 'One_2.54344-58', 'One_2.63402-51', 'One_2.63984-53', 'One_2.73487-56', 'One_2.75586-34', 'One_4a.21799-29', 'One_U1208-67', 'One_1a.14866-33', 'One_1a.28530-58', 'One_1a.40596-58', 'One_1b.90239-52', 'One_2.21498-40', 'One_2.52394-28', 'One_2.68991-62', 'One_3RFP.22594-56', 'One_4a.14909-37', 'One_1a.11922-46', 'One_2.48637-56', 'One_2.58200-50', 'One_2.6248-65', 'One_ACBP-79', 'One_cetn1-167', 'One_3RFP.77278-58', 'One_1b.90162-56', 'One_2.14018-56', 'One_2.28376-51', 'One_2.32804-64', 'One_2.39254-69', 'One_2.39727-26', 'One_2.41231-65', 'One_2.45396-65', 'One_2.45877-55', 'One_3RFP.28357-29', 'One_3RFP.43935-63', 'One_1b.59232-51', 'One_1b.61967-31', 'One_1b.79240-40', 'One_2.72182-45', 'One_3RFP.27065-48', 'One_3RFP.53804-31', 'One_3RFP.70374-61', 'One_U504-141', 'One_taf12-248', 'One_2.34398-57', 'One_2.24434-33', 'One_3RFP.46202-49', 'One_1b.8859-52', 'One_2.46152-39', 'One_2.48609-47', 'One_2.48952-59', 'One_2.71025-65', 'One_3RFP.83488-50', 'One_4a.47733-44', 'One_metA-253', 'One_1a.15228-58', 'One_2.46012-53', 'One_4a.19795-33']
	omy268 = ["M09AAC.055", "M09AAD.076", "M09AAE.082", "M09AAJ.163", "OMGH1PROM1-SNP1", "OMS00002", "OMS00003", "OMS00006", "OMS00008", "OMS00013", "OMS00014", "OMS00015", "OMS00017", "OMS00018", "OMS00024", "OMS00030", "OMS00039", "OMS00041", "OMS00048", "OMS00052", "OMS00053", "OMS00056", "OMS00057", "OMS00058", "OMS00061", "OMS00062", "OMS00064", "OMS00068", "OMS00070", "OMS00071", "OMS00072", "OMS00074", "OMS00077", "OMS00078", "OMS00079", "OMS00087", "OMS00089", "OMS00090", "OMS00092", "OMS00095", "OMS00096", "OMS00101", "OMS00103", "OMS00105", "OMS00106", "OMS00111", "OMS00112", "OMS00114", "OMS00116", "OMS00118", "OMS00119", "OMS00120", "OMS00121", "OMS00127", "OMS00128", "OMS00129", "OMS00132", "OMS00133", "OMS00134", "OMS00138", "OMS00143", "OMS00149", "OMS00151", "OMS00153", "OMS00154", "OMS00156", "OMS00164", "OMS00169", "OMS00173", "OMS00174", "OMS00175", "OMS00176", "OMS00179", "OMS00180", "OMY1011SNP", "Ocl_gshpx-357", "Omy_1004", "Omy_101554-306", "Omy_101832-195", "Omy_101993-189", "Omy_102505-102", "Omy_102867-443", "Omy_103705-558", "Omy_104519-624", "Omy_104569-114", "Omy_105075-162", "Omy_105105-448", "Omy_105385-406", "Omy_105714-265", "Omy_107031-704", "Omy_107285-69", "Omy_107336-170", "Omy_107806-34", "Omy_108007-193", "Omy_109243-222", "Omy_109525-403", "Omy_109894-185", "Omy_110064-419", "Omy_110201-359", "Omy_110362-585", "Omy_110689-148", "Omy_111084-526", "Omy_111383-51", "Omy_111666-301", "Omy_112301-202", "Omy_112820-82", "Omy_113490-159", "Omy_114315-438", "Omy_114587-480", "Omy_114976-223", "Omy_116733-349", "Omy_116938-264", "Omy_117286-374", "Omy_117370-400", "Omy_117540-259", "Omy_117815-81", "Omy_118175-396", "Omy_118205-116", "Omy_118654-91", "Omy_120255-332", "Omy_128693-455", "Omy_128923-433", "Omy_128996-481", "Omy_129870-756", "Omy_130524-160", "Omy_131460-646", "Omy_187760-385", "Omy_96222-125", "Omy_97077-73", "Omy_97660-230", "Omy_97865-196", "Omy_97954-618", "Omy_98683-165", "Omy_99300-202", "Omy_BAC-B4-324", "Omy_BAC-F5.284", "Omy_BAMBI2.312", "Omy_BAMBI4.238", "Omy_CRBF1-1", "Omy_G3PD_2-371", "Omy_G3PD_2.246", "Omy_GH1P1_2", "Omy_GHSR-121", "Omy_IL17-185", "Omy_IL1b-163", "Omy_IL6-320", "Omy_Il-1b_.028", "Omy_Il1b-198", "Omy_LDHB-1_i2", "Omy_LDHB-2_e5", "Omy_LDHB-2_i6", "Omy_MYC_2", "Omy_NaKATPa3-50", "Omy_Ogo4-212", "Omy_OmyP9-180", "Omy_Omyclmk438-96", "Omy_Ots249-227", "Omy_RAD16104-20", "Omy_RAD17632-23", "Omy_RAD23577-43", "Omy_RAD26080-69", "Omy_RAD29700-18", "Omy_RAD35417-9", "Omy_RAD36848-7", "Omy_RAD38269-10", "Omy_RAD42793-59", "Omy_RAD43612-42", "Omy_RAD45104-18", "Omy_RAD47080-54", "Omy_RAD47444-53", "Omy_RAD47955-51", "Omy_RAD48799-69", "Omy_RAD5026-64", "Omy_RAD52458-17", "Omy_RAD52812-28", "Omy_RAD58213-70", "Omy_RAD58835-15", "Omy_RAD62596-38", "Omy_RAD66218-58", "Omy_RAD66834-17", "Omy_RAD69583-33", "Omy_RAD7210-8", "Omy_RAD73204-63", "Omy_RAD74691-49", "Omy_RAD76882-63", "Omy_RAD77789-54", "Omy_RAD88028-7", "Omy_RAD88122-32", "Omy_SECC22b-88", "Omy_U11_2b-154", "Omy_UBA3b", "Omy_UT16_2-173", "Omy_ada10-71", "Omy_aldB-165", "Omy_anp-17", "Omy_aromat-280", "Omy_arp-630", "Omy_aspAT-123", "Omy_b1-266", "Omy_b9-164", "Omy_bcAKala-380rd", "Omy_ca050-64", "Omy_carban1-264", "Omy_cd28-130", "Omy_cd59-206", "Omy_cd59b-112", "Omy_cin-172", "Omy_colla1-525", "Omy_cox1-221", "Omy_cox2-335", "Omy_crb-106", "Omy_cyp17-153", "Omy_e1-147", "Omy_ftzf1-217", "Omy_g1-103", "Omy_g12-82", "Omy_gadd45-332", "Omy_gdh-271", "Omy_gh-475", "Omy_gluR-79", "Omy_gsdf-291", "Omy_hsc715-80", "Omy_hsf1b-241", "Omy_hsf2-146", "Omy_hsp47-86", "Omy_hsp70aPro-329", "Omy_hsp90BA-193", "Omy_hus1-52", "Omy_impa1-55", "Omy_inos-97", "Omy_lpl-220", "Omy_mapK3-103", "Omy_mcsf-268", "Omy_metA-161", "Omy_metB-138", "Omy_myclarp404-111", "Omy_myoD-178", "Omy_nach-200", "Omy_ndk-152", "Omy_nips-299", "Omy_nkef-241", "Omy_ntl-27", "Omy_nxt2-273", "Omy_oxct-85", "Omy_p53-262", "Omy_pad-196", "Omy_ppie-232", "Omy_rapd-167", "Omy_rbm4b-203", "Omy_redd1-410", "Omy_sSOD-1", "Omy_sast-264", "Omy_srp09-37", "Omy_star-206", "Omy_stat3-273", "Omy_sys1-188", "Omy_tlr3-377", "Omy_tlr5-205", "Omy_txnip-343", "Omy_u07-79-166", "Omy_u09-52.284", "Omy_u09-53.469", "Omy_u09-54-311", "Omy_u09-56.119", "Omy_u09-61.043", "Omy_vamp5-303", "Omy_vatf-406", "Omy_zg57-91"]
	ots298 = ["Ots_110495-380", "Ots_ARNT", "Ots_crRAD18289-33", "Ots_crRAD48459-74", "Ots_crRAD55400-59", "Ots_crRAD57376-68", "Ots_100884-287", "Ots_101119-381", "Ots_101554-407", "Ots_101704-143", "Ots_101770-82", "Ots_102213-210", "Ots_102414-395", "Ots_102457-132", "Ots_102801-308", "Ots_102867-609", "Ots_103041-52", "Ots_103122-180", "Ots_104048-194", "Ots_104063-132", "Ots_104415-88", "Ots_105105-613", "Ots_105132-200", "Ots_105385-421", "Ots_105401-325", "Ots_105407-117", "Ots_105897-124", "Ots_106313-729", "Ots_106419b-618", "Ots_106499-70", "Ots_106747-239", "Ots_107074-284", "Ots_107285-93", "Ots_107607-315", "Ots_107806-821", "Ots_108007-208", "Ots_108390-329", "Ots_108735-302", "Ots_108820-336", "Ots_109525-816", "Ots_109693-392", "Ots_110064-383", "Ots_110201-363", "Ots_110381-164", "Ots_110551-64", "Ots_110689-218", "Ots_111084b-619", "Ots_111312-435", "Ots_111681-657", "Ots_112208-722", "Ots_112301-43", "Ots_112419-131", "Ots_112820-284", "Ots_112876-371", "Ots_113242-216", "Ots_113457-40R", "Ots_115987-325", "Ots_117242-136", "Ots_117259-271", "Ots_117370-471", "Ots_117432-409", "Ots_118175-479", "Ots_118205-61", "Ots_118938-325", "Ots_120950-417", "Ots_122414-56", "Ots_123048-521", "Ots_123921-111", "Ots_124774-477", "Ots_126619-400", "Ots_127236-62", "Ots_127760-569", "Ots_128302-57", "Ots_128693-461", "Ots_128757-61R", "Ots_129144-472", "Ots_129170-683", "Ots_129458-451", "Ots_129870-55", "Ots_130720-99", "Ots_131460-584", "Ots_131802-393", "Ots_131906-141", "Ots_94857-232R", "Ots_94903-99R", "Ots_95442b-204", "Ots_96222-525", "Ots_96500-180", "Ots_96899-357R", "Ots_97077-179R", "Ots_97660-56", "Ots_98409-850", "Ots_98683-796", "Ots_99550-204", "Ots_afmid-196", "Ots_AldB1-122", "Ots_aldb-177M", "Ots_AldoB4-183", "Ots_arp-436", "Ots_AsnRS-60", "Ots_aspat-196", "Ots_BMP2-SNP1", "Ots_brp16-64", "Ots_Cath_D141", "Ots_CCR7", "Ots_CD59-2", "Ots_CD63", "Ots_cgo24-22", "Ots_Chin30up-211", "Ots_CirpA", "Ots_cox1-241", "Ots_CRB211", "Ots_crRAD10447-25", "Ots_crRAD11620-55", "Ots_crRAD12037-39", "Ots_crRAD12711-37", "Ots_crRAD13725-51", "Ots_crRAD16540-50", "Ots_crRAD17527-58", "Ots_crRAD18492-65", "Ots_crRAD18937-60", "Ots_crRAD20262-46", "Ots_crRAD20376-66", "Ots_crRAD20887-70", "Ots_crRAD21115-24", "Ots_crRAD22960-32", "Ots_crRAD23631-48", "Ots_crRAD24807-74", "Ots_crRAD25367-50", "Ots_crRAD255-59", "Ots_crRAD26081-28", "Ots_crRAD26165-69", "Ots_crRAD26541-47", "Ots_crRAD27164-55", "Ots_crRAD27515-69", "Ots_crRAD2806-42", "Ots_crRAD28677-65", "Ots_crRAD292-21", "Ots_crRAD30341-48", "Ots_crRAD33054-62", "Ots_crRAD33491-71", "Ots_crRAD34397-33", "Ots_crRAD35313-66", "Ots_crRAD36072-29", "Ots_crRAD36152-44", "Ots_crRAD3758-51", "Ots_crRAD38095-29", "Ots_crRAD38746-36", "Ots_crRAD42058-48", "Ots_crRAD44588-67", "Ots_crRAD46081-56", "Ots_crRAD46751-42", "Ots_crRAD47297-55", "Ots_crRAD5061-27", "Ots_crRAD55475-26", "Ots_crRAD57520-66", "Ots_crRAD57537-24", "Ots_crRAD57687-34", "Ots_crRAD60614-46", "Ots_crRAD60620-51", "Ots_crRAD61523-71", "Ots_crRAD66330-60", "Ots_crRAD69327-53", "Ots_crRAD73823-60", "Ots_crRAD74766-28", "Ots_crRAD75581-70", "Ots_crRAD76512-28", "Ots_crRAD78968-46", "Ots_crRAD92420-25", "Ots_crRAD9615-69", "Ots_DDX5-171", "Ots_E2-275", "Ots_EndoRB1-486", "Ots_EP-529", "Ots_Est1363", "Ots_Est740", "Ots_ETIF1A", "Ots_FARSLA-220", "Ots_FGF6A", "Ots_FGF6B_1", "Ots_GCSH", "Ots_GDH-81x", "Ots_GH2", "Ots_GnRH-271", "Ots_GPDH-338", "Ots_GPH-318", "Ots_GST-207", "Ots_GST-375", "Ots_GTH2B-550", "Ots_HFABP-34", "Ots_HMGB1-73", "Ots_hnRNPL-533", "Ots_hsc71-3'-488", "Ots_hsc71-5'-453", "Ots_hsp27b-150", "Ots_Hsp90a", "Ots_HSP90B-100", "Ots_IGF-I.1-76", "Ots_Ikaros-250", "Ots_IL11", "Ots_IL8R_C8", "Ots_IsoT", "Ots_LEI-292", "Ots_LWSop-638", "Ots_mapK-3'-309", "Ots_mapKpr-151", "Ots_MetA", "Ots_MHC1", "Ots_MHC2", "Ots_mybp-85", "Ots_Myc-366", "Ots_myo1a-384", "Ots_myoD-364", "Ots_NAML12-SNP1", "Ots_nelfd-163", "Ots_NFYB-147", "Ots_nkef-192", "Ots_NOD1", "Ots_nramp-321", "Ots_ntl-255", "Ots_Ostm1", "Ots_OTALDBINT1-SNP1", "Ots_OTDESMIN19-SNP1", "Ots_Ots311-101x", "Ots_OTSMTA-SNP1", "Ots_OTSTF1-SNP1", "Ots_P450-288", "Ots_P450", "Ots_P53", "Ots_parp3-286", "Ots_PEMT", "Ots_PGK-54", "Ots_pigh-105", "Ots_pop5-96", "Ots_ppie-245", "Ots_Prl2", "Ots_RAD4543-52", "Ots_RAG3", "Ots_RAS1", "Ots_redd1-187", "Ots_RFC2-558", "Ots_S7-1", "Ots_SClkF2R2-135", "Ots_sept9-78", "Ots_SERPC1-209", "Ots_SL", "Ots_slc7a2-71", "Ots_stk6-516", "Ots_SWS1op-182", "Ots_TAPBP", "Ots_TCTA-58", "Ots_TGFB", "Ots_Thio", "Ots_TLR3", "Ots_TNF", "Ots_Tnsf", "Ots_tpx2-125", "Ots_trnau1ap-86", "Ots_txnip-321", "Ots_u07-07.161", "Ots_u07-17.135", "Ots_u07-17.373", "Ots_u07-18.378", "Ots_u07-19.260", "Ots_u07-20.332", "Ots_u07-25.325", "Ots_u07-49.290", "Ots_u07-53.133", "Ots_u07-57.120", "Ots_u07-64.221", "Ots_u1002-75", "Ots_u1004-117", "Ots_u1006-171", "Ots_u1007-124", "Ots_u1008-108", "Ots_u202-161", "Ots_u211-85", "Ots_U212-158", "Ots_U2305-63", "Ots_U2362-227", "Ots_U2362-330", "Ots_U2446-123", "Ots_U2567-104", "Ots_u4-92", "Ots_U5049-250", "Ots_U5121-34", "Ots_u6-75", "Ots_unk1104-38", "Ots_unk1832-39", "Ots_unk3513-49", "Ots_unk526", "Ots_unk7936-50", "Ots_unk9480-51", "Ots_USMG5-67", "Ots_vatf-251", "Ots_zn593-346", "Ots_zP3b-215", "Ots_ZR-575"]
	One382 = ['One_1a.20814-68', 'One_1a.35102-40', 'One_1a.41570-62', 'One_1b.76828-42', 'One_2.2794-52', 'One_2.40976-37', 'One_2.76328-30', 'One_Prl2', 'One_1a.24137-66', 'One_1b.70297-45', 'One_1b.72637-54', 'One_1b.80431-46', 'One_2.28955-38', 'One_2.45475-58', 'One_2.59897-41', 'One_2.75617-47', 'One_2.78138-52', 'One_2.86889-62', 'One_4a.59326-51', 'One_E2-65', 'One_STR07', 'One_U1013-108', 'One_U301-92', 'One_apoe-83', 'One_rab1a-76', 'One_rpo2j-261', 'One_1a.21766-41', 'One_1a.39667-45', 'One_1a.41039-32', 'One_1b.63942-34', 'One_1b.67122-29', 'One_1b.75641-68', 'One_1b.75977-57', 'One_1b.77679-43', 'One_1b.79575-35', 'One_2.13049-68', 'One_2.20011-31', 'One_2.24795-33', 'One_2.30761-49', 'One_2.52203-44', 'One_2.70711-39', 'One_4a.24016-53', 'One_4a.28062-27', 'One_DDX5-86', 'One_Hsp47', 'One_KPNA-422', 'One_U1010-81', 'One_U1204-53', 'One_VIM-569', 'One_agt-132', 'One_p53-534', 'One_pax7-248', 'One_srp09-127', 'One_1a.44788-39', 'One_1b.5833-45', 'One_1b.70768-40', 'One_2.65369-59', 'One_HpaI-99', 'One_LEI-87', 'One_RFC2-102', 'One_RH2op-395', 'One_Tf_ex11-750', 'One_txnip-401', 'One_1a.11217-58', 'One_1a.22351-67', 'One_2.23230-33', 'One_4a.9496-33', 'One_KCT1-453', 'One_SUMO1-6', 'One_1b.73420-52', 'One_2.16766-45', 'One_Tf_in3-182', 'One_1a.40490-31', 'One_1b.72787-38', 'One_2.9840-29', 'One_MARCKS-241', 'One_Mkpro-129', 'One_1a.48100-30', 'One_lpp1-44', 'One_1a.41669-43', 'One_1b.89789-50', 'One_Ots213-181', 'One_2.6529-40', 'One_psme2-354', 'One_2.38070-37', 'One_sast-211', 'One_IL8r-362', 'One_1b.58981-44', 'One_2.21990-53', 'One_2.51143-68', 'One_U1205-57', 'One_1c.85338-32', 'One_U1212-106', 'One_2.62240-45', 'One_U1216-230', 'One_U1202-1052', 'One_2.5654-67', 'One_2.71512-50', 'One_1b.58946-27', 'One_2.73281-30', 'One_2.85340-30', 'One_vamp5-255', 'One_1b.75116-33', 'One_4a.7119-57', 'One_c3-98', 'One_1b.78278-49', 'One_U502-167', 'One_STC-410', 'One_UCA-24', 'One_1a.5313-43', 'One_1b.56760-39', 'One_2.10623-54', 'One_1b.8859-52', 'One_2.46152-39', 'One_2.48609-47', 'One_2.48952-59', 'One_2.71025-65', 'One_3RFP.83488-50', 'One_4a.47733-44', 'One_metA-253', 'One_1b.90162-56', 'One_2.14018-56', 'One_2.28376-51', 'One_2.32804-64', 'One_2.39254-69', 'One_2.39727-26', 'One_2.41231-65', 'One_2.45396-65', 'One_2.45877-55', 'One_3RFP.28357-29', 'One_3RFP.43935-63', 'One_1a.32514-40', 'One_2.15628-38', 'One_2.41128-67', 'One_2.53715-43', 'One_2.54344-58', 'One_2.63402-51', 'One_2.63984-53', 'One_2.73487-56', 'One_2.75586-34', 'One_4a.21799-29', 'One_U1208-67', 'One_1b.56018-52', 'One_1b.60577-60', 'One_1b.68250-26', 'One_1b.80929-65', 'One_2.11303-51', 'One_2.66245-33', 'One_2.78198-36', 'One_2.80525-35', 'One_3RFP.25749-53', 'One_4a.67550-44', 'One_CD9-269', 'One_ODC1-196', 'One_cin-177', 'One_3RFP.76568-44', 'One_ghsR-66', 'One_1a.23626-48', 'One_1b.6939-43', 'One_4a.47407-42', 'One_aldB-152', 'One_1a.12851-49', 'One_3RFP.60219-36', 'One_U1012-68', 'One_1b.5780-62', 'One_HGFA-49', 'One_U1009-91', 'One_1b.72136-33', 'One_4a.25174-68', 'One_1b.83667-61', 'One_1a.15228-58', 'One_2.46012-53', 'One_4a.19795-33', 'One_1b.59232-51', 'One_1b.61967-31', 'One_1b.79240-40', 'One_2.72182-45', 'One_3RFP.27065-48', 'One_3RFP.53804-31', 'One_3RFP.70374-61', 'One_U504-141', 'One_taf12-248', 'One_1a.14866-33', 'One_1a.28530-58', 'One_1a.40596-58', 'One_1b.90239-52', 'One_2.21498-40', 'One_2.52394-28', 'One_2.68991-62', 'One_3RFP.22594-56', 'One_4a.14909-37', 'One_1a.11387-56', 'One_1a.53797-66', 'One_1c.5765-39', 'One_2.13757-55', 'One_2.45776-68', 'One_3RFP.39193-43', 'One_3RFP.62278-33', 'One_RFC2-285', 'One_1a.12158-56', 'One_1c.70294-64', 'One_2.63762-51', 'One_2.8522-64', 'One_3RFP.60536-30', 'One_3RFP.81817-50', 'One_4a.63914-64', 'One_gdh-212', 'One_4a.13104-68', 'One_GPDH-201', 'One_U1004-183', 'One_U1101', 'One_U1206-108', 'One_U1207-231', 'One_Zp3b-49', 'One_1a.17043-35', 'One_3RFP.50303-37', 'One_4a.43537-65', 'One_1a.53123-31', 'One_3RFP.74551-60', 'One_1b.85587-38', 'One_2.65998-48', 'One_2.87240-34', 'One_1b.74472-27', 'One_3RFP.72689-27', 'One_2.86898-35', 'One_2.66468-68', 'One_1a.36888-37', 'One_2.44103-35', 'One_2.21735-50', 'One_2.34398-57', 'One_1a.11922-46', 'One_2.48637-56', 'One_2.58200-50', 'One_2.6248-65', 'One_ACBP-79', 'One_cetn1-167', 'One_1a.25904-44', 'One_1a.55218-55', 'One_3RFP.70898-49', 'One_1b.56528-40', 'One_3RFP.19596-43', 'One_U1003-75', 'One_1a.42211-64', 'One_1a.5407-55', 'One_1b.78365-62', 'One_4a.63494-55', 'One_GHII-2165', 'One_U1203-175', 'One_1b.60684-45', 'One_2.35396-68', 'One_1a.37709-28', 'One_3RFP.18602-33', 'One_4a.58187-48', 'One_U401-224', 'One_vatf-214', 'One_1a.23491-46', 'One_2.84041-67', 'One_2.77164-35', 'One_2.80177-55', 'One_2.51190-49', 'One_2.24434-33', 'One_3RFP.46202-49', 'One_1b.73656-45', 'One_1b.64886-42', 'One_2.5338-43', 'One_3RFP.40708-40', 'One_U1014-74', 'One_4a.41625-38', 'One_U503-170', 'One_1b.9362-41', 'One_2.75847-69', 'One_3RFP.22492-53', 'One_GTHa', 'One_1a.15933-53', 'One_2.41371-35', 'One_1b.88442-61', 'One_sys1-230', 'One_1a.13961-31', 'One_2.5744-26', 'One_PIP_3', 'One_redd1-414rd', 'One_1b.56276-30', 'One_spf30-207', 'One_3RFP.77278-58', 'One_1a.30563-32', 'One_3RFP.71744-45', 'One_3RFP.80215-59', 'One_4a.12382-55', 'One_U1201-492', 'One_4a.22514-58', 'One_1a.29135-58', 'One_2.81573-50', 'One_2.20130-27', 'One_U1209-111', 'One_U1105', 'One_3RFP.6937-57', 'One_1b.9134-28', 'One_1b.76686-31', 'One_1b.63191-29', 'One_CFP1', 'One_3RFP.36741-50', 'One_RAG3-93', 'One_2.38869-26', 'One_4a.32159-43', 'One_ZNF-61', 'One_3RFP.80015-44', 'One_3RFP.58408-56', 'One_1c.34041-34', 'One_3RFP.72056-60', 'One_4a.40410-31', 'One_1b.70694-28', 'One_3RFP.53932-47', 'One_2.90529-63', 'One_2.74998-68', 'One_2.45957-54', 'One_4a.6566-43', 'One_3RFP.52579-51', 'One_4a.52596-64', 'One_2.58880-45', 'One_1b.72992-37', 'One_3RFP.38229-53', 'One_1a.51402-35', 'One_3RFP.12866-45', 'One_3RFP.22563-57', 'One_1c.51810-33', 'One_1d.80954-64', 'One_3RFP.89355-44', 'One_1b.56339-60', 'One_2.21362-59', 'One_3RFP.56125-30', 'One_dds-529', 'One_U1214-107', 'One_ins-107', 'One_4a.25035-26', 'One_4a.51425-41', 'One_U1024-197', 'One_3RFP.7464-69', 'One_4a.32932-27', 'One_2.27413-63', 'One_3RFP.22665-32', 'One_2.90371-33', 'One_1c.87896-59', 'One_1a.20787-45', 'One_2.64150-27', 'One_2.34943-66', 'One_1b.70246-46', 'One_3RFP.47148-54', 'One_hsc71-220', 'One_4a.22901-67', 'One_4a.46542-38', 'One_1a.25746-65', 'One_1a.39597-30', 'One_1a.45935-29', 'One_1a.14403-38', 'One_3RFP.46608-58', 'One_1a.32238-60', 'One_2.29037-65', 'One_1a.43386-37', 'One_3RFP.26492-46', 'One_1a.54542-52', 'One_3RFP.70952-46', 'One_4a.44564-40', 'One_Ots208-234', 'One_U1215-82', 'One_2.76532-58', 'One_1d.50813-42', 'One_4a.53531-43', 'One_1b.74818-26', 'One_1a.42159-31', 'One_ssrd-135', 'One_4a.84616-28', 'One_3RFP.25184-65', 'One_1b.61920-50', 'One_4a.5042-49', 'One_1a.27760-67', 'One_1a.22268-41', 'One_1b.64367-65', 'One_4a.51580-50', 'One_4a.32895-28', 'One_1a.40540-34', 'One_1a.4900-40', 'One_1a.27200-35']
	
	sucRateDict, pbtInX, sockeye ={}, [], ''
	if lociList[0] in omy268: [pbtInX.append(lociList.index(i)) for i in omyPBT96]
	if lociList[0] in ots298: [pbtInX.append(lociList.index(i)) for i in otsPBT96]
	if lociList[0] in One382:
		[pbtInX.append(lociList.index(i)) for i in OneSub270]
		sockeye = 'yes'		# take into account One_1a.43386-37 failing at all individuals

	for fullName, geno in genotypeDict.items():
		pbtfailC, metrics = 0, []
		allNumLoFail = geno.count('00')
		if sockeye: allLoPerSuc = float(round((1 - ((allNumLoFail - 1)/len(lociList)))*100, 1))	# take into account One_1a.43386-37 failing at all individuals
		else: allLoPerSuc = float(round((1 - (allNumLoFail/len(lociList)))*100, 1))
		if pbtInX:
			for i in pbtInX:
				if geno[i] == '00': pbtfailC+=1
			if sockeye: pbtLoPerSuc = float(round((1 - ((pbtfailC - 1)/len(pbtInX)))*100, 1))	# take into account One_1a.43386-37 failing at all individuals
			else: pbtLoPerSuc = float(round((1 - (pbtfailC/len(pbtInX)))*100, 1))
			metrics.extend([allLoPerSuc, allNumLoFail, pbtLoPerSuc, pbtfailC])
			sucRateDict[fullName] = metrics
		else:
			metrics.extend([allLoPerSuc, allNumLoFail, 'na', 'na'])
			sucRateDict[fullName] = metrics
	return sucRateDict

	
def dSearch(perP, subSetSam, smallerSam, dFuncSamDict, perSimilar):
	sam1, sam2, perSim, numSame, numUnlike, nonComp, numHetHomo, numHomoHomo = [],[],[],[],[],[],[],[]
	tComp, cTrack = 0, 0
	for x in subSetSam:
		mGeno = dFuncSamDict.get(x)
		for y in smallerSam[cTrack:]:
			alike, unlike, samG, cantComp, hetHomo, homoHomo = 0,0,0,0,0,0
			sGeno = dFuncSamDict.get(y)
			for g in range(7,len(mGeno)):
				alleleLength = int(len(mGeno[g])/2)
				if mGeno[g][0] == '0' or sGeno[g][0] == '0': cantComp +=1	# assume all allele types start with something other than zero except for missing data
				elif mGeno[g] == sGeno[g]: alike +=1
				else:
					unlike +=1
					if mGeno[g][:alleleLength] != sGeno[g][:alleleLength] and mGeno[g][alleleLength:] != sGeno[g][alleleLength:] : homoHomo+=1
					else: hetHomo+=1
					
			try:
				if alike/(len(mGeno[7:])- cantComp) >= perSimilar:
					sam1.append(x)
					sam2.append(y)
					perSim.append(float(round((alike/(alike + unlike)*100),2)))
					numSame.append(alike)
					numUnlike.append(unlike)
					nonComp.append(cantComp)
					numHetHomo.append(hetHomo)
					numHomoHomo.append(homoHomo)
			except ZeroDivisionError: pass
			tComp +=1
		cTrack +=1
	
	# write results subfile
	outFileName = perP + '.dupResults.csv'
	outDup = open(outFileName, 'w')
	for i in range(len(sam1)):
		outDup.write(','.join((sam1[i], sam2[i], str(perSim[i]), str(numSame[i]), str(numUnlike[i]), str(nonComp[i]), str(numHetHomo[i]), str(numHomoHomo[i]))))
		outDup.write('\r\n')


def DMX(processName, sampleName, iCombo):
	fileD, hD = {},{}
	print('Process', processName, 'is working on', len(sampleName),'samples')
	for i in range(len(sampleName)):
		fileD[iCombo[i]] = sampleName[i]	# assign barcodes as key and file name as value for dictionary
		hD[iCombo[i]] = open(fileD[iCombo[i]], 'a')	# open-append fastq files
	
	mFastQ = open(sys.argv[2], 'r')
	seqNameLine = mFastQ.readline()
	while seqNameLine:
		data = list(islice(mFastQ, 3))	# read next three lines
		seqMetaData = seqNameLine.rstrip('\n')
		if seqMetaData[-13:] in fileD:
			w2 = hD[seqMetaData[-13:]]	# get value (fastq file name) associated with barcodes
			w2.write(''.join((seqNameLine, ''.join(data))))
		seqNameLine = mFastQ.readline()
	mFastQ.close()

	
def typing(perP, subSetSam, probeFile):
	commandList = []
	for fastQname in subSetSam:
		genoName = fastQname.replace('fastq', 'genos')
		command = ['GTseq_Genotyper_v3.pl', probeFile, fastQname, '>', genoName]
		commandLine = ' '.join(command)
		commandList.append(commandLine)
	for i in commandList: call(i, shell=True)
	return None

